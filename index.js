require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const {
    MESSAGES,
    COMMANDS,
    CALLBACK_DATA,
    IMAGES,
    TRIBUTE_PAYMENT_URL,
    SUPPORT_LINK
} = require('./config/constants');

const {
    getMainKeyboard,
    getBackKeyboard,
    getPaymentKeyboard,
    getSetupKeyboard,
    getVpnSetupDialogKeyboard,
    getDeviceSelectionKeyboard,
    getAppInstallKeyboard,
    getFinalSetupKeyboard,
    getManualSetupKeyboard,
    getAssistantUnavailableKeyboard
} = require('./utils/keyboards');

const { getUserConfig } = require('./utils/user-configs');
const XuiAPI = require('./utils/xui-api');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 3xui
const xuiApi = new XuiAPI({
    baseUrl: process.env.XUI_BASE_URL,
    email: process.env.XUI_EMAIL,
    password: process.env.XUI_PASSWORD
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.XUI_BASE_URL || !process.env.XUI_EMAIL || !process.env.XUI_PASSWORD) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è 3xui API');
    console.error('   XUI_BASE_URL, XUI_EMAIL, XUI_PASSWORD –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env');
    process.exit(1);
}

// –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é 3xui
console.log('üîß 3XUI Configuration:');
console.log(`   Base URL: ${process.env.XUI_BASE_URL}`);
console.log(`   Email: ${process.env.XUI_EMAIL}`);
console.log(`   Password: ***`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    try {
        await showMainMenu(chatId);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function showMainMenu(chatId, messageId = null) {
    try {
        console.log(`üè† –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}${messageId ? `, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}` : ''}`);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üëë –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø',
                            url: 'https://t.me/tribute/app?startapp=sy4h'
                        }
                    ],
                    [   
                        {
                            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN',
                            callback_data: 'setup_manual'
                        }
                    ],
                    [
                        {
                            text: 'üíÅüèº‚Äç‚ôÄÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            callback_data: 'support'
                        }
                    ],
                    [
                        {
                            text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                            callback_data: 'profile'
                        }
                    ]
                ]
            }
        };

        console.log(`üè† –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:`, JSON.stringify(keyboard, null, 2));

        if (messageId) {
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.editMessageMedia({
                type: 'photo',
                media: IMAGES.WELCOME,
                caption: MESSAGES.WELCOME,
                parse_mode: 'Markdown'
            }, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard.reply_markup
            });
            console.log(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, message_id: ${messageId}`);
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const result = await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                caption: MESSAGES.WELCOME,
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            console.log(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}, message_id: ${result.message_id}`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start)
bot.on('message', async (msg) => {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.id}: ${msg.text}`);
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if (text === COMMANDS.START) {
        return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
async function showPaymentInfo(chatId, messageId = null) {
    try {
        console.log(`üí≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}${messageId ? `, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}` : ''}`);
        console.log(`üí≥ TRIBUTE_PAYMENT_URL:`, TRIBUTE_PAYMENT_URL);
        console.log(`üí≥ MESSAGES.PAYMENT:`, MESSAGES.PAYMENT);

        const keyboard = getPaymentKeyboard(TRIBUTE_PAYMENT_URL);
        console.log(`üí≥ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã:`, JSON.stringify(keyboard, null, 2));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if (IMAGES.PAYMENT) {
            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.PAYMENT,
                    caption: MESSAGES.PAYMENT,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.PAYMENT, {
                    caption: MESSAGES.PAYMENT,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        } else {
            if (messageId) {
                await bot.editMessageText(MESSAGES.PAYMENT, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            } else {
                await bot.sendMessage(chatId, MESSAGES.PAYMENT, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        }

        console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN
async function showVpnSetup(chatId, messageId = null) {
    try {
        console.log(`‚öôÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}${messageId ? `, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}` : ''}`);

        const setupText = MESSAGES.VPN_SETUP;

        if (messageId) {
            // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º editMessageMedia
            // —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await bot.editMessageMedia({
                type: 'photo',
                media: IMAGES.WELCOME,
                caption: setupText,
                parse_mode: 'Markdown'
            }, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: getVpnSetupDialogKeyboard()
            });
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                caption: setupText,
                parse_mode: 'Markdown',
                reply_markup: getVpnSetupDialogKeyboard()
            });
        }

        console.log(`‚úÖ –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
async function showSupport(chatId, messageId = null) {
    try {
        const supportText = MESSAGES.SUPPORT + SUPPORT_LINK;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if (IMAGES.SUPPORT) {
            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.SUPPORT,
                    caption: supportText,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: getBackKeyboard()
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.SUPPORT, {
                    caption: supportText,
                    parse_mode: 'Markdown',
                    reply_markup: getBackKeyboard()
                });
            }
        } else {
            if (messageId) {
                await bot.editMessageText(supportText, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: getBackKeyboard()
                });
            } else {
                await bot.sendMessage(chatId, supportText, {
                    parse_mode: 'Markdown',
                    reply_markup: getBackKeyboard()
                });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showProfile(chatId, messageId = null) {
    try {
        console.log(`üë§ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}${messageId ? `, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}` : ''}`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —á–µ—Ä–µ–∑ API 3xui
        const profile = await xuiApi.getUserProfile(chatId);

        if (!profile) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
            console.log(`‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø',
                                url: 'https://t.me/tribute/app?startapp=sy4h'
                            }
                        ],
                        [
                            {
                                text: 'üîô –ù–∞–∑–∞–¥',
                                callback_data: 'back_to_main'
                            }
                        ]
                    ]
                }
            };

            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.WELCOME,
                    caption: MESSAGES.PROFILE_NO_SUBSCRIPTION,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard.reply_markup
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                    caption: MESSAGES.PROFILE_NO_SUBSCRIPTION,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }

            return;
        }

        if (!profile.active) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
            console.log(`‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø',
                                url: 'https://t.me/tribute/app?startapp=sy4h'
                            }
                        ],
                        [
                            {
                                text: 'üîô –ù–∞–∑–∞–¥',
                                callback_data: 'back_to_main'
                            }
                        ]
                    ]
                }
            };

            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.WELCOME,
                    caption: MESSAGES.PROFILE_NO_SUBSCRIPTION,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard.reply_markup
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                    caption: MESSAGES.PROFILE_NO_SUBSCRIPTION,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }

            return;
        }

        // –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);

        const startDate = profile.startDate.toLocaleDateString('ru-RU');
        const endDate = profile.endDate.toLocaleDateString('ru-RU');
        const usedTraffic = profile.usedTraffic;
        const trafficLimit = profile.trafficLimit;
        const limitIp = profile.limitIp;

        const profileText = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
            `üìÖ **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:** ${endDate}\n` +
            `üìä **–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:** ${trafficLimit}\n` +
            `üîó **–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤:** ${limitIp}\n\n` +
            `‚úÖ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'back_to_main'
                        }
                    ]
                ]
            }
        };

        if (messageId) {
            await bot.editMessageMedia({
                type: 'photo',
                media: IMAGES.WELCOME,
                caption: profileText,
                parse_mode: 'Markdown'
            }, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard.reply_markup
            });
        } else {
            await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                caption: profileText,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }

        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø',
                            url: 'https://t.me/tribute/app?startapp=sy4h'
                        }
                    ],
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'back_to_main'
                        }
                    ]
                ]
            }
        };

        if (messageId) {
            await bot.editMessageMedia({
                type: 'photo',
                media: IMAGES.WELCOME,
                caption: MESSAGES.PROFILE_NO_SUBSCRIPTION,
                parse_mode: 'Markdown'
            }, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard.reply_markup
            });
        } else {
            await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                caption: MESSAGES.PROFILE_NO_SUBSCRIPTION,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const { data, message } = callbackQuery;
    const chatId = message.chat.id;

    console.log(`üì± –ü–æ–ª—É—á–µ–Ω callback: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    console.log(`üì± –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç callback:`, JSON.stringify(callbackQuery, null, 2));

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await bot.answerCallbackQuery(callbackQuery.id);

    try {
        switch (data) {
            case CALLBACK_DATA.VPN_SETUP:
                console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showVpnSetup(chatId, message.message_id);
                break;
            case CALLBACK_DATA.SUPPORT:
                console.log(`üÜò –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showSupport(chatId, message.message_id);
                break;
            case CALLBACK_DATA.PROFILE:
                console.log(`üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showProfile(chatId, message.message_id);
                break;
            case CALLBACK_DATA.BACK_TO_MAIN:
                console.log(`üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showMainMenu(chatId, message.message_id);
                break;
            case 'setup_assistant':
                console.log(`ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showAssistantUnavailable(chatId, message.message_id);
                break;
            case 'setup_manual':
                console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showManualSetup(chatId, message.message_id);
                break;
            case 'copy_config_ios':
            case 'copy_config_android':
            case 'copy_config_windows':
            case 'copy_config_mac':
                const copyDeviceType = data.replace('copy_config_', '');
                console.log(`üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ${copyDeviceType} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showCopyConfig(chatId, copyDeviceType, message.message_id);
                break;
            case 'support':
                console.log(`üÜò –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showSupport(chatId, message.message_id);
                break;
            case 'profile':
                console.log(`üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await showProfile(chatId);
                break;
            default:
                console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:', data);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback ${data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
bot.on('any', (event) => {
    console.log(`üîç –°–æ–±—ã—Ç–∏–µ –±–æ—Ç–∞: ${event.type}`);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot.on('message', (msg) => {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.id}: ${msg.text}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ VPN –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
console.log('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
async function showAssistantUnavailable(chatId, messageId = null) {
    try {
        console.log(`ü§ñ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}${messageId ? `, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}` : ''}`);

        if (messageId) {
            await bot.editMessageMedia({
                type: 'photo',
                media: IMAGES.WELCOME,
                caption: MESSAGES.ASSISTANT_UNAVAILABLE,
                parse_mode: 'Markdown'
            }, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: getAssistantUnavailableKeyboard()
            });
        } else {
            await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                caption: MESSAGES.ASSISTANT_UNAVAILABLE,
                parse_mode: 'Markdown',
                reply_markup: getAssistantUnavailableKeyboard()
            });
        }

        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
async function showCopyConfig(chatId, deviceType, messageId = null) {
    try {
        console.log(`üìã –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${deviceType} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}${messageId ? `, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}` : ''}`);
        
        // –ü–æ–ª—É—á–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3x-ui API
        console.log(`üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}...`);
        const userInfo = await xuiApi.findUserByTelegramId(chatId);
        
        if (!userInfo) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 3x-ui`);
            const errorMessage = "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.";
            
            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.WELCOME,
                    caption: errorMessage,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: getBackKeyboard()
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                    caption: errorMessage,
                    parse_mode: 'Markdown',
                    reply_markup: getBackKeyboard()
                });
            }
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const vlessConfig = xuiApi.generateVlessConfig(userInfo.user);
        
        if (!vlessConfig) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
            const errorMessage = "‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.";
            
            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.WELCOME,
                    caption: errorMessage,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: getBackKeyboard()
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                    caption: errorMessage,
                    parse_mode: 'Markdown',
                    reply_markup: getBackKeyboard()
                });
            }
            return;
        }
        
        console.log(`‚úÖ VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`);
        
        let message = `üìã **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ${deviceType}**\n\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º deep-link –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (deviceType === 'iOS') {
            const base64Config = Buffer.from(vlessConfig).toString('base64');
            const deepLinkUrl = `shadowrocket://add/sub://${base64Config}`;
            message += `üîó **Deep-link –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\`${deepLinkUrl}\`\n\nüí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å deep-link:**\n1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–±–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n`;
        } else if (deviceType === 'Android') {
            const base64Config = Buffer.from(vlessConfig).toString('base64');
            const deepLinkUrl = `v2rayng://install-config/${base64Config}`;
            message += `üîó **Deep-link –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\`${deepLinkUrl}\`\n\nüí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å deep-link:**\n1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–±–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n`;
        }
        
        message += `üìã **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VLESS:**\n\`\`\`\n${vlessConfig}\n\`\`\`\n\n`;
        message += `üìù **–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n1. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è ${deviceType}\n2. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—ã—à–µ\n4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        const keyboard = {
            inline_keyboard: [
                [
                    { text: "üîô –ù–∞–∑–∞–¥", callback_data: "setup_manual" }
                ]
            ]
        };
        
        if (messageId) {
            await bot.editMessageMedia({
                type: 'photo',
                media: IMAGES.WELCOME,
                caption: message,
                parse_mode: 'Markdown'
            }, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard
            });
        } else {
            await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                caption: message,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
        
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${deviceType}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async function showManualSetup(chatId, messageId = null) {
    try {
        console.log(`‚öôÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}${messageId ? `, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}` : ''}`);
        
        // –ü–æ–ª—É—á–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3x-ui API
        console.log(`üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}...`);
        const userInfo = await xuiApi.findUserByTelegramId(chatId);
        
        if (!userInfo) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 3x-ui`);
            const errorMessage = "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.";
            
            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.WELCOME,
                    caption: errorMessage,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: getBackKeyboard()
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                    caption: errorMessage,
                    parse_mode: 'Markdown',
                    reply_markup: getBackKeyboard()
                });
            }
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const vlessConfig = xuiApi.generateVlessConfig(userInfo.user);
        
        if (!vlessConfig) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
            const errorMessage = "‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.";
            
            if (messageId) {
                await bot.editMessageMedia({
                    type: 'photo',
                    media: IMAGES.WELCOME,
                    caption: errorMessage,
                    parse_mode: 'Markdown'
                }, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: getBackKeyboard()
                });
            } else {
                await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                    caption: errorMessage,
                    parse_mode: 'Markdown',
                    reply_markup: getBackKeyboard()
                });
            }
            return;
        }
        
        console.log(`‚úÖ VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
        console.log(`   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${vlessConfig.substring(0, 50)}...`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        const message = `*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPN –≤—Ä—É—á–Ω—É—é*\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Å—Å—ã–ª–∫–µ:**\nüì± **iOS:** [V2box](https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690)\nü§ñ **Android:** [V2rayNG](https://play.google.com/store/apps/details?id=com.v2ray.ang&hl=ru)\nü™ü **Windows:** [Hiddify](https://hiddify.com/)\nüçé **Mac:** [V2box](https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690)\nüêß **Linux:** [V2rayA](https://github.com/v2rayA/v2rayA/releases)\n2. –°–∫–æ–ø–∏—Ä—É–π —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ (–Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–¥ –∏ –≤—ã–±–µ—Ä–∏ \"–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\")\n*–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥:*\n\`\`\`\n${vlessConfig}\`\`\`\n\n3. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏ –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–æ –∑–Ω–∞—á–∫–æ–º –ø–ª—é—Å–∞)\n4. –í—Å—Ç–∞–≤—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–π –∫–æ–¥ –∏ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ VPN\n\n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = getManualSetupKeyboard();
        console.log(`üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`, JSON.stringify(keyboard, null, 2));
        
        if (messageId) {
            await bot.editMessageMedia({
                type: 'photo',
                media: IMAGES.WELCOME,
                caption: message,
                parse_mode: 'Markdown'
            }, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard
            });
        } else {
            await bot.sendPhoto(chatId, IMAGES.WELCOME, {
                caption: message,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
        
        console.log(`‚úÖ –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        throw error;
    }
} 