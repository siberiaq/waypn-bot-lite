/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 3xui API
 */

const axios = require('axios');
const { REALITY_CONFIG } = require('../config/constants');

class XuiAPI {
    constructor(config) {
        this.baseUrl = config.baseUrl;
        this.email = config.email;
        this.password = config.password;
        this.session = null;
        this.cookies = [];
        
        this.axios = axios.create({
            baseURL: this.baseUrl,
            timeout: 10000,
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'VPN-Bot/1.0'
            },
            withCredentials: true
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.axios.interceptors.request.use((config) => {
            console.log(`üåê CURL REQUEST TO 3XUI:`);
            console.log(`   URL: ${config.method?.toUpperCase()} ${config.baseURL}${config.url}`);
            console.log(`   Headers:`, JSON.stringify(config.headers, null, 2));
            if (config.data) {
                console.log(`   Body:`, JSON.stringify(config.data, null, 2));
            }
            console.log(`   Full curl command:`);
            let curlCmd = `curl -X ${config.method?.toUpperCase()} "${config.baseURL}${config.url}"`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            Object.entries(config.headers).forEach(([key, value]) => {
                curlCmd += ` -H "${key}: ${value}"`;
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            if (config.data) {
                curlCmd += ` -d '${JSON.stringify(config.data)}'`;
            }
            
            console.log(`   ${curlCmd}`);
            console.log(`üåê END CURL REQUEST`);
            
            return config;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
        this.axios.interceptors.response.use(
            (response) => {
                console.log(`‚úÖ 3XUI RESPONSE:`);
                console.log(`   Status: ${response.status}`);
                console.log(`   Headers:`, JSON.stringify(response.headers, null, 2));
                console.log(`   Data:`, JSON.stringify(response.data, null, 2));
                console.log(`‚úÖ END 3XUI RESPONSE`);
                return response;
            },
            (error) => {
                console.log(`‚ùå 3XUI ERROR:`);
                console.log(`   Status: ${error.response?.status}`);
                console.log(`   Message: ${error.message}`);
                if (error.response) {
                    console.log(`   Response Headers:`, JSON.stringify(error.response.headers, null, 2));
                    console.log(`   Response Data:`, JSON.stringify(error.response.data, null, 2));
                }
                console.log(`‚ùå END 3XUI ERROR`);
                return Promise.reject(error);
            }
        );
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
     */
    extractCookies(response) {
        const setCookieHeaders = response.headers['set-cookie'];
        if (setCookieHeaders) {
            this.cookies = setCookieHeaders.map(cookie => {
                return cookie.split(';')[0];
            });
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫—É–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    getCookieString() {
        return this.cookies.join('; ');
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3xui
     */
    async login() {
        try {
            console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3xui...');
            
            const response = await this.axios.post('/login', {
                username: this.email,
                password: this.password
            });

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            this.extractCookies(response);

            if (response.data.success) {
                this.session = response.data.obj;
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3xui —É—Å–ø–µ—à–Ω–∞');
                console.log('üç™ –ö—É–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', this.cookies.length);
                return true;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ 3xui:', response.data.msg);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 3xui:', error.message);
            if (error.response) {
                console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
                console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
            }
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö inbound'–æ–≤
     */
    async getInbounds() {
        try {
            if (!this.session) {
                const loggedIn = await this.login();
                if (!loggedIn) return null;
            }

            console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ inbound\'–æ–≤...');
            
            const response = await this.axios.get('/panel/api/inbounds/list', {
                headers: {
                    'Cookie': this.getCookieString()
                }
            });

            if (response.data.success) {
                console.log('‚úÖ –°–ø–∏—Å–æ–∫ inbound\'–æ–≤ –ø–æ–ª—É—á–µ–Ω');
                return response.data.obj;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound\'–æ–≤:', response.data.msg);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound\'–æ–≤:', error.message);
            if (error.response) {
                console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
                console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
            }
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º inbound
     */
    async getInbound(id) {
        try {
            if (!this.session) {
                const loggedIn = await this.login();
                if (!loggedIn) return null;
            }

            console.log(`üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ inbound ${id}...`);
            
            const response = await this.axios.get(`/panel/api/inbounds/get/${id}`, {
                headers: {
                    'Cookie': this.getCookieString()
                }
            });

            if (response.data.success) {
                console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ inbound –ø–æ–ª—É—á–µ–Ω–∞');
                return response.data.obj;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound:', response.data.msg);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound:', error.message);
            if (error.response) {
                console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
                console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
            }
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ inbound —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è VLESS
     */
    async getInboundConfig(id) {
        try {
            if (!this.session) {
                const loggedIn = await this.login();
                if (!loggedIn) return null;
            }

            console.log(`üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ inbound ${id}...`);
            
            const response = await this.axios.get(`/panel/api/inbounds/get/${id}`, {
                headers: {
                    'Cookie': this.getCookieString()
                }
            });

            if (response.data.success) {
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è inbound –ø–æ–ª—É—á–µ–Ω–∞');
                return response.data.obj;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ inbound:', response.data.msg);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ inbound:', error.message);
            if (error.response) {
                console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
                console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
            }
            return null;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    generateVlessConfig(user) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Reality
            const vlessConfig = `vless://${user.id}@${REALITY_CONFIG.server}?type=tcp&security=reality&pbk=${REALITY_CONFIG.publicKey}&fp=random&sni=${REALITY_CONFIG.serverName}&sid=${REALITY_CONFIG.shortId}&spx=%2F&flow=${user.flow}#waypn.com-${user.email}`;
            
            console.log('‚úÖ VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
            console.log(`   UUID: ${user.id}`);
            console.log(`   Public Key: ${REALITY_CONFIG.publicKey}`);
            console.log(`   Server Name: ${REALITY_CONFIG.serverName}`);
            console.log(`   Short ID: ${REALITY_CONFIG.shortId}`);
            console.log(`   Flow: ${user.flow}`);
            
            return vlessConfig;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
     */
    async findUserByEmail(email) {
        try {
            const inbounds = await this.getInbounds();
            if (!inbounds) return null;

            for (const inbound of inbounds) {
                const inboundDetails = await this.getInbound(inbound.id);
                if (!inboundDetails) continue;

                // –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É –∏–∑ settings
                let settings;
                try {
                    settings = JSON.parse(inboundDetails.settings);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings –¥–ª—è inbound ${inbound.id}:`, error.message);
                    continue;
                }

                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ clients
                if (settings && settings.clients) {
                    const user = settings.clients.find(client => 
                        client.email === email || client.email === `${email}@waypn.com`
                    );
                    
                    if (user) {
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} –Ω–∞–π–¥–µ–Ω –≤ inbound ${inbound.id}`);
                        return {
                            inboundId: inbound.id,
                            inboundName: inbound.remark,
                            user: user,
                            inboundDetails: inboundDetails,
                            settings: settings
                        };
                    }
                }
            }

            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            return null;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ inbound
     */
    async createUser(inboundId, userData) {
        try {
            if (!this.session) {
                const loggedIn = await this.login();
                if (!loggedIn) return null;
            }

            console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.email} –≤ inbound ${inboundId}...`);

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound
            const inbound = await this.getInbound(inboundId);
            if (!inbound) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound');
                return null;
            }

            // –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É –∏–∑ settings
            let settings;
            try {
                settings = JSON.parse(inbound.settings);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings:', error.message);
                return null;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!settings.clients) {
                settings.clients = [];
            }

            settings.clients.push(userData);

            // –û–±–Ω–æ–≤–ª—è–µ–º settings –≤ inbound
            inbound.settings = JSON.stringify(settings, null, 2);

            // –û–±–Ω–æ–≤–ª—è–µ–º inbound
            const response = await this.axios.post(`/panel/api/inbounds/update/${inboundId}`, inbound, {
                headers: {
                    'Cookie': this.getCookieString()
                }
            });

            if (response.data.success) {
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
                return response.data.obj;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.data.msg);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            if (error.response) {
                console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
                console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
            }
            return null;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Tribute
     */
    async createVpnUser(telegramUserId, expiresAt, subscriptionData) {
        try {
            console.log(`üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ${telegramUserId}...`);

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingUser = await this.findUserByTelegramId(telegramUserId);
            
            if (existingUser) {
                console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUserId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const updateResult = await this.updateUserSubscription(existingUser, expiresAt, subscriptionData);
                
                if (updateResult) {
                    console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const vlessConfig = this.generateVlessConfig(updateResult.user);
                    
                    return {
                        success: true,
                        action: 'updated',
                        user: updateResult.user,
                        inbound: updateResult.inbound,
                        subscription: updateResult.subscription,
                        vlessConfig: vlessConfig,
                        oldExpiryTime: updateResult.oldExpiryTime,
                        newExpiryTime: updateResult.newExpiryTime
                    };
                } else {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    return null;
                }
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...`);

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbound'–æ–≤
            const inbounds = await this.getInbounds();
            if (!inbounds || inbounds.length === 0) {
                console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö inbound\'–æ–≤');
                return null;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º inbound —Å ID 4 (waypn.com Friends&Family)
            const inbound = inbounds.find(inbound => inbound.id === 4);
            
            if (!inbound) {
                console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω inbound —Å ID 4');
                console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ inbound\'—ã:');
                inbounds.forEach(inbound => {
                    console.log(`   - ${inbound.remark} (ID: ${inbound.id})`);
                });
                return null;
            }

            console.log(`üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º inbound: ${inbound.remark} (ID: ${inbound.id})`);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é inbound
            const inboundConfig = await this.getInboundConfig(inbound.id);
            if (!inboundConfig) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é inbound');
                return null;
            }

            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = {
                id: this.generateUUID(),
                email: `${telegramUserId}_a`, // –ë–µ–∑ –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞ @waypn.com
                flow: "xtls-rprx-vision",
                limitIp: 3, // –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                totalGB: 0, // 0 = –±–µ–∑–ª–∏–º–∏—Ç
                expiryTime: new Date(expiresAt).getTime(),
                enable: true,
                tgId: "",
                subId: `sub_${subscriptionData.subscription_id}`,
                reset: 0
            };

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const result = await this.createUser(inbound.id, userData);
            
            if (result) {
                console.log(`‚úÖ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${userData.email}`);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                const vlessConfig = this.generateVlessConfig(userData);
                
                return {
                    success: true,
                    action: 'created',
                    user: userData,
                    inbound: inbound,
                    subscription: subscriptionData,
                    vlessConfig: vlessConfig
                };
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
     */
    async findUserByTelegramId(telegramUserId) {
        try {
            const inbounds = await this.getInbounds();
            if (!inbounds) return null;

            const email = `${telegramUserId}_a`;

            for (const inbound of inbounds) {
                const inboundDetails = await this.getInbound(inbound.id);
                if (!inboundDetails) continue;

                // –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É –∏–∑ settings
                let settings;
                try {
                    settings = JSON.parse(inboundDetails.settings);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings –¥–ª—è inbound ${inbound.id}:`, error.message);
                    continue;
                }

                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ clients
                if (settings && settings.clients) {
                    const user = settings.clients.find(client => 
                        client.email === email || client.email === `${email}@waypn.com`
                    );
                    
                    if (user) {
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramUserId} –Ω–∞–π–¥–µ–Ω –≤ inbound ${inbound.id}`);
                        return {
                            inboundId: inbound.id,
                            inboundName: inbound.remark,
                            user: user,
                            inboundDetails: inboundDetails,
                            settings: settings
                        };
                    }
                }
            }

            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID:', error.message);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
     */
    async getUserProfile(telegramUserId) {
        try {
            console.log(`üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId}...`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userInfo = await this.findUserByTelegramId(telegramUserId);
            
            if (!userInfo) {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return null;
            }
            
            const user = userInfo.user;
            const now = Date.now();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
            const isActive = user.enable && user.expiryTime > now;
            
            if (!isActive) {
                console.log(`‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞`);
                return {
                    found: true,
                    active: false,
                    user: user,
                    inbound: userInfo.inboundName
                };
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
            // –í 3xui API —Ç—Ä–∞—Ñ–∏–∫ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            let usedTraffic = 0;
            let trafficLimit = '–ë–µ–∑–ª–∏–º–∏—Ç';
            
            if (user.totalGB && user.totalGB > 0) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
                trafficLimit = `${user.totalGB} GB`;
                // –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –æ–±—ã—á–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–æ–ª–µ up + down
                if (user.up && user.down) {
                    usedTraffic = Math.round((user.up + user.down) / (1024 * 1024 * 1024) * 100) / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GB
                }
            } else {
                // –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                trafficLimit = '–ë–µ–∑–ª–∏–º–∏—Ç';
                if (user.up && user.down) {
                    usedTraffic = Math.round((user.up + user.down) / (1024 * 1024 * 1024) * 100) / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GB
                }
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            const startDate = new Date(user.expiryTime - (30 * 24 * 60 * 60 * 1000)); // –ü—Ä–∏–º–µ—Ä–Ω–æ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            const endDate = new Date(user.expiryTime);
            
            const profile = {
                found: true,
                active: true,
                user: user,
                inbound: userInfo.inboundName,
                startDate: startDate,
                endDate: endDate,
                usedTraffic: usedTraffic,
                trafficLimit: trafficLimit,
                limitIp: user.limitIp || 3
            };
            
            console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId} –ø–æ–ª—É—á–µ–Ω:`, {
                active: profile.active,
                startDate: profile.startDate.toLocaleDateString('ru-RU'),
                endDate: profile.endDate.toLocaleDateString('ru-RU'),
                usedTraffic: profile.usedTraffic,
                trafficLimit: profile.trafficLimit
            });
            
            return profile;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            return null;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async updateUserSubscription(userInfo, newExpiresAt, subscriptionData) {
        try {
            if (!this.session) {
                const loggedIn = await this.login();
                if (!loggedIn) return null;
            }

            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userInfo.user.email}...`);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound
            const inbound = await this.getInbound(userInfo.inboundId);
            if (!inbound) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound');
                return null;
            }

            // –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É –∏–∑ settings
            let settings;
            try {
                settings = JSON.parse(inbound.settings);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings:', error.message);
                return null;
            }

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
            const userIndex = settings.clients.findIndex(client => 
                client.email === userInfo.user.email || 
                client.email === `${userInfo.user.email}@waypn.com`
            );

            if (userIndex === -1) {
                console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ settings');
                return null;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            const currentExpiryTime = settings.clients[userIndex].expiryTime;
            const newExpiryTime = new Date(newExpiresAt).getTime();
            
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç–µ
            // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
            const now = Date.now();
            let finalExpiryTime;
            
            if (currentExpiryTime > now) {
                // –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
                const currentExpiryDate = new Date(currentExpiryTime);
                const newPeriodMs = newExpiryTime - now; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                finalExpiryTime = currentExpiryDate.getTime() + newPeriodMs;
                console.log(`üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –î–æ–±–∞–≤–ª—è–µ–º ${newPeriodMs / (1000 * 60 * 60 * 24)} –¥–Ω–µ–π –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ`);
            } else {
                // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
                finalExpiryTime = newExpiryTime;
                console.log(`üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings.clients[userIndex].expiryTime = finalExpiryTime;
            settings.clients[userIndex].subId = `sub_${subscriptionData.subscription_id}`;
            settings.clients[userIndex].enable = true; // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            // –û–±–Ω–æ–≤–ª—è–µ–º settings –≤ inbound
            inbound.settings = JSON.stringify(settings, null, 2);

            // –û–±–Ω–æ–≤–ª—è–µ–º inbound
            const response = await this.axios.post(`/panel/api/inbounds/update/${userInfo.inboundId}`, inbound, {
                headers: {
                    'Cookie': this.getCookieString()
                }
            });

            if (response.data.success) {
                console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                return {
                    success: true,
                    user: settings.clients[userIndex],
                    inbound: userInfo.inboundName,
                    subscription: subscriptionData,
                    oldExpiryTime: currentExpiryTime,
                    newExpiryTime: finalExpiryTime
                };
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', response.data.msg);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
            if (error.response) {
                console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
                console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
            }
            return null;
        }
    }
}

module.exports = XuiAPI; 