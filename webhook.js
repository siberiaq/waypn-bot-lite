const express = require('express');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');
const XuiAPI = require('./utils/xui-api');
const { saveUserConfig } = require('./utils/user-configs');
const { 
    TRIBUTE_PAYMENT_URL, 
    SUPPORT_LINK, 
    MESSAGES,
    SETUP_MESSAGES,
    IMAGES
} = require('./config/constants');

const { getSetupKeyboard } = require('./utils/keyboards');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3xui API
const xuiConfig = {
    baseUrl: 'https://waypn.com:2053/waypn-settings/',
    email: 'admin',
    password: 'z4C9wQ8he4875T6d'
};
const xui = new XuiAPI(xuiConfig);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(bodyParser.json({
    verify: (req, res, buf) => {
        try {
            JSON.parse(buf);
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
            // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
            const fixedBuf = Buffer.concat([buf, Buffer.from('}')]);
            try {
                JSON.parse(fixedBuf);
                console.log('‚úÖ JSON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
            } catch (e2) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON');
            }
        }
    }
}));

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ middleware:', error.message);
    res.status(500).json({ error: 'Internal Server Error' });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        message: '–í–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç'
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Tribute
app.post('/webhook/tribute', async (req, res) => {
    try {
        const webhookData = req.body;
        
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Tribute:', JSON.stringify(webhookData, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        if (webhookData.name === 'new_subscription') {
            const payload = webhookData.payload;
            const telegramUserId = payload.telegram_user_id;
            const expiresAt = payload.expires_at;
            
            console.log(`üéâ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId}`);
            console.log(`   –°—É–º–º–∞: ${payload.amount} ${payload.currency}`);
            console.log(`   –ü–µ—Ä–∏–æ–¥: ${payload.period}`);
            console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiresAt}`);
            
            // –°–æ–∑–¥–∞–µ–º VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 3xui
            console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const vpnUser = await xui.createVpnUser(telegramUserId, expiresAt, {
                subscription_id: payload.subscription_id,
                period: payload.period
            });
            
            if (vpnUser) {
                if (vpnUser.action === 'created') {
                    console.log('‚úÖ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                    console.log(`   Email: ${vpnUser.user.email}`);
                    console.log(`   UUID: ${vpnUser.user.id}`);
                    console.log(`   Inbound: ${vpnUser.inbound.remark}`);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    saveUserConfig(telegramUserId, vpnUser.vlessConfig);
                    
                } else if (vpnUser.action === 'updated') {
                    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                    console.log(`   Email: ${vpnUser.user.email}`);
                    console.log(`   –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${vpnUser.oldExpiryTime}`);
                    console.log(`   –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${vpnUser.newExpiryTime}`);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    saveUserConfig(telegramUserId, vpnUser.vlessConfig);
                }
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const amountInRubles = payload.amount / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
            const nextBillingDate = new Date(expiresAt).toLocaleDateString('ru-RU'); // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            let message;
            
            if (vpnUser && vpnUser.action === 'updated') {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp'—ã –≤ —á–∏—Ç–∞–µ–º—ã–µ –¥–∞—Ç—ã
                const oldDate = new Date(parseInt(vpnUser.oldExpiryTime)).toLocaleDateString('ru-RU');
                const newDate = new Date(parseInt(vpnUser.newExpiryTime)).toLocaleDateString('ru-RU');
                
                // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                message = `üéâ *–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!*\n\n` +
                         `üí∞ –°—É–º–º–∞: ${amountInRubles} ${payload.currency}\n` +
                         `üìÖ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: ${payload.period}\n` +
                         `üìÖ –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${oldDate}\n` +
                         `üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${newDate}\n\n` +
                         `${SETUP_MESSAGES.SUCCESS}`;
            } else if (vpnUser && vpnUser.action === 'created') {
                // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = `üéâ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n` +
                         `üí∞ –°—É–º–º–∞: ${amountInRubles} ${payload.currency}\n` +
                         `üìÖ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: ${payload.period}\n` +
                         `‚è∞ –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: ${nextBillingDate}\n\n` +
                         `${SETUP_MESSAGES.SUCCESS}`;
            } else {
                // –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                message = `üéâ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n` +
                         `üí∞ –°—É–º–º–∞: ${amountInRubles} ${payload.currency}\n` +
                         `üìÖ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: ${payload.period}\n` +
                         `‚è∞ –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: ${nextBillingDate}\n\n` +
                         `‚ö†Ô∏è *VPN –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è*\n\n` +
                         `–ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.`;
            }
            
            const keyboard = getSetupKeyboard();
            console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:`, JSON.stringify(keyboard, null, 2));
            console.log(`üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:`, message);
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                if (IMAGES.PAYMENT) {
                    const result = await bot.sendPhoto(telegramUserId, IMAGES.PAYMENT, {
                        caption: message,
                        parse_mode: 'Markdown',
                        reply_markup: keyboard
                    });
                    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramUserId}`);
                    console.log(`üìã –ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:`, keyboard);
                    console.log(`üì® –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:`, result.message_id);
                    console.log(`üì® –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, JSON.stringify(result, null, 2));
                } else {
                    const result = await bot.sendMessage(telegramUserId, message, {
                        parse_mode: 'Markdown',
                        reply_markup: keyboard
                    });
                    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramUserId}`);
                    console.log(`üìã –ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:`, keyboard);
                    console.log(`üì® –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:`, result.message_id);
                    console.log(`üì® –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, JSON.stringify(result, null, 2));
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error.message);
                console.error(`‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:`, error);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
            console.log('üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', {
                subscription_id: payload.subscription_id,
                user_id: payload.user_id,
                telegram_user_id: telegramUserId,
                amount: payload.amount,
                currency: payload.currency,
                expires_at: expiresAt,
                vpn_action: vpnUser ? vpnUser.action : 'failed',
                vpn_created: !!vpnUser
            });
            
        } else {
            console.log(`üìù –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ —Ç–∏–ø–∞: ${webhookData.name}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        res.json({ 
            status: 'success', 
            message: 'Webhook processed successfully',
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error.message);
        res.status(500).json({ 
            error: 'Internal Server Error',
            message: error.message 
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê –í–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ–±—Ö—É–∫–∞: http://localhost:${PORT}/webhook/tribute`);
    console.log(`üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:${PORT}/health`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
}); 